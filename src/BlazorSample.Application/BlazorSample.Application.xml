<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlazorSample.Application</name>
    </assembly>
    <members>
        <member name="M:BlazorSample.Application.AppServices.Demo.DemoAppServices.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{BlazorSample.Application.Resources.ModelSharedResource})">
            <summary>
            Initialize an instance of <see cref="T:BlazorSample.Application.AppServices.Demo.DemoAppServices"/>
            </summary>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.EntityKeyCrudAppService`7.#ctor(BlazorSample.Uow.IUnitOfWork{BlazorSample.Infra.EntityFrameworkCore.DbContexts.BlazorSampleDbContext},MapsterMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="T:BlazorSample.Application.AppServices.Generics.ICrudAppService`6">
            <summary>
            基础crud 服务
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TGetListRequest"></typeparam>
            <typeparam name="TListItemDto"></typeparam>
            <typeparam name="TUpdateRequest"></typeparam>
            <typeparam name="TCreateRequest"></typeparam>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.ICrudAppService`6.GetAsync(`0,System.Threading.CancellationToken)">
            <summary>
            根据id获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.ICrudAppService`6.GetListAsync(`2,System.Threading.CancellationToken)">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.ICrudAppService`6.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            根据id删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.ICrudAppService`6.CreateAsync(`5,System.Threading.CancellationToken)">
            <summary>
            新增
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Generics.ICrudAppService`6.UpdateAsync(`0,`4,System.Threading.CancellationToken)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.AppServices.Product.ProductAppService.#ctor(BlazorSample.Uow.IUnitOfWork{BlazorSample.Infra.EntityFrameworkCore.DbContexts.BlazorSampleDbContext},MapsterMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.Command.ICommand.Transactional">
            <summary>
            是否是事务性的
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Command.Product.CreateProductCommandHandler.#ctor(MapsterMapper.IMapper,BlazorSample.Uow.IUnitOfWork{BlazorSample.Infra.EntityFrameworkCore.DbContexts.BlazorSampleDbContext})">
            <summary>
            Initialize an instance of <see cref="T:BlazorSample.Application.Command.Product.CreateProductCommandHandler"/>
            </summary>
        </member>
        <member name="M:BlazorSample.Application.DomainEventHandlers.Product.NewProductCreateDomainEventHandler.Handle(BlazorSample.Domain.DomainEvents.Product.NewProductCreateDomainEvent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.DomainEventHandlers.Product.NewProductCreateDomainEventHandler.#ctor(Microsoft.Extensions.Logging.ILogger{BlazorSample.Application.DomainEventHandlers.Product.NewProductCreateDomainEventHandler},BlazorSample.Application.IntegrationEvents.IntegrationEventbox.IntegrationEventBoxService)">
            <summary>
            Initialize an instance of <see cref="T:BlazorSample.Application.DomainEventHandlers.Product.NewProductCreateDomainEventHandler"/>
            </summary>
        </member>
        <member name="T:BlazorSample.Application.IntegrationEvents.IntegrationEventbox.IntegrationEventBoxService">
            <summary>
            发件箱
            </summary>
        </member>
        <member name="M:BlazorSample.Application.IntegrationEvents.IntegrationEventbox.IntegrationEventBoxService.Add(BlazorSample.Domain.Aggregates.EventLogs.IntegrationEvent,System.String)">
            <summary>
            添加集成事件
            </summary>
            <param name="evt"></param>
            <param name="transactionId"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.IntegrationEvents.IntegrationEventbox.IntegrationEventBoxService.SaveEventAndChangesAsync(BlazorSample.Domain.Aggregates.EventLogs.IntegrationEvent,System.String)">
            <summary>
            保存集成事件并保存业务变更
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.IntegrationEvents.IntegrationEventbox.IntegrationEventBoxService.PublishThroughEventBusAsync(BlazorSample.Domain.Aggregates.EventLogs.IntegrationEvent)">
            <summary>
            通过事件总线发布事件
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.MapperProfiles.ProductMapper.Register(Mapster.TypeAdapterConfig)">
            <inheritdoc />
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Name">
            <summary>Unique name of the menu item in the application.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Icon">
            <summary>Icon of the menu item if exists.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.DisplayName">
            <summary>Display name of the menu item.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Order">
            <summary>The Display order of the menu. Optional.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Url">
            <summary>The URL to navigate when this menu item is selected.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.MetaData">
            <summary>A custom object related to this menu item.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Target">
            <summary>
            Target of the menu item. Can be "_blank", "_self", "_parent", "_top" or a frame name.
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.IsEnabled">
            <summary>Can be used to enable/disable a menu item.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.IsVisible">
            <summary>Can be used to show/hide a menu item.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Application.Navigation.MenuItemModel.Items">
            <summary>Sub items of this menu item.</summary>
        </member>
        <member name="P:BlazorSample.Application.Models.Product.ProductDto.Remark">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="T:BlazorSample.Application.Models.IResponseWraps">
            <summary>
            api 结果包装空接口
            </summary>
        </member>
        <member name="T:BlazorSample.Application.Models.ResultDto">
            <summary>
            api返回包装结构
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Models.ResultDto.Successed">
            <summary>
            接口是否处理成功
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Models.ResultDto.Code">
            <summary>
            业务错误码
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Models.ResultDto.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto.Success">
            <summary>
                成功 - 空返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto.Error(System.String)">
            <summary>
                业务错误
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto.ErrorRequest(System.String)">
            <summary>
            请求不合法
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto.Fatal(System.String)">
            <summary>
            程序错误
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto.TooManyRequest(System.String)">
            <summary>
            程序错误
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorSample.Application.Models.ResultDto`1">
            <summary>
            api返回包装结构 - 泛型
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto`1.Success(`0)">
            <summary>
                执行成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto`1.Success(`0,System.String)">
            <summary>
                执行成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto`1.Error(System.String,`0)">
            <summary>
                业务错误
            </summary>
            <param name="message"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto`1.Fatal(System.String,`0)">
            <summary>
            程序错误
            </summary>
            <param name="message"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Models.ResultDto`1.ErrorRequest(System.String,`0)">
            <summary>
            数据验证错误 无效的请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlazorSample.Application.Models.ResponseWapper">
            <summary>
            api结果包装扩展
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Permission.CachedPermissionManager.IsGrantedAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.Permission.CachedPermissionManager.IsGrantedAsync(System.String[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.Permission.CachedPermissionManager.#ctor(Microsoft.Extensions.Logging.ILogger{Dotnetydd.Permission.PermissionManager.InMemoryPermissionManager},Dotnetydd.Permission.Definition.IPermissionDefinitionManager,Dotnetydd.Permission.PermissionGrant.IPermissionGrantStore)">
            <summary>
            Initialize an instance of <see cref="T:BlazorSample.Application.Permission.CachedPermissionManager"/>
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Permission.IPermissionAppService.GetPermissionsAsync(System.String,System.String)">
            <summary>
            分页筛选获取权限树结构（树形结构数据）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorSample.Application.Permission.PermissionAppService.GrantAsync(System.String[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.Permission.PermissionAppService.#ctor(Dotnetydd.Permission.PermissionManager.IPermissionManager,Dotnetydd.Permission.PermissionGrant.IPermissionGrantStore,Dotnetydd.Permission.Definition.IPermissionDefinitionManager)">
            <summary>
            Initialize an instance of <see cref="T:BlazorSample.Application.Permission.PermissionAppService"/>
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Permission.PermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BlazorSample.Application.Permission.PermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:BlazorSample.Application.Permission.PermissionDefinitionProvider">
            <summary>
            权限定义Provider
            can read permissions from db or other store device
            </summary>
        </member>
        <member name="M:BlazorSample.Application.Permission.PermissionDefinitionProvider.Define(Dotnetydd.Permission.Definition.PermissionDefinitionContext)">
            <inheritdoc />
        </member>
        <member name="T:BlazorSample.Application.Resources.ModelSharedResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Resources.ModelSharedResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Resources.ModelSharedResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:BlazorSample.Application.Resources.ModelSharedResource.Application">
            <summary>
              查找类似 Application 的本地化字符串。
            </summary>
        </member>
        <member name="T:BlazorSample.Application.AutoResolveDependencyAttribute">
            <summary>
            Mark classes are injected using automatically generated constructors
            </summary>
        </member>
        <member name="T:BlazorSample.Application.AutoInjectAttribute">
            <summary>
            Mark fields or properties are injected through the constructor
            </summary>
        </member>
        <member name="T:BlazorSample.Application.AutoInjectHelper">
            <summary>
            extension with auto generator inject coe
            </summary>
        </member>
        <member name="M:BlazorSample.Application.AutoInjectHelper.AutoInjectBlazorSample_Application(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            auto inject code
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.InjectLifeTime">
            <summary>
            service life time enum
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.InjectableAttribute">
            <summary>
            service inject config attribute
            </summary>
        </member>
    </members>
</doc>
